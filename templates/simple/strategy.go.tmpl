//go:build wasip1

package main

import (
	"context"
	{% if template == "consecutive" %}
	"encoding/json"
	{% endif %}

	"github.com/knqyf263/go-plugin/types/known/emptypb"
	"github.com/rxtech-lab/argo-trading/pkg/strategy"
)

// {{ strategyName }}Strategy implements a strategy that{% if template == "consecutive" %} buys on 2 consecutive up candles
// and sells on 2 consecutive down candles{% else %} implements your custom trading logic{% endif %}
type {{ strategyName }}Strategy struct {
	{% if template == "consecutive" %}// Strategy is stateless, state is stored in cache{% endif %}
}

func main() {}

func init() {
	strategy.RegisterTradingStrategy(New{{ strategyName }}Strategy())
}

func New{{ strategyName }}Strategy() strategy.TradingStrategy {
	return &{{ strategyName }}Strategy{}
}

// Initialize implements strategy.TradingStrategy.
func (s *{{ strategyName }}Strategy) Initialize(_ context.Context, _ *strategy.InitializeRequest) (*emptypb.Empty, error) {
	// Nothing to initialize
	return &emptypb.Empty{}, nil
}

// Name implements strategy.TradingStrategy.
func (s *{{ strategyName }}Strategy) Name(_ context.Context, _ *strategy.NameRequest) (*strategy.NameResponse, error) {
	return &strategy.NameResponse{Name: "{{ strategyName }}Strategy"}, nil
}

// ProcessData implements strategy.TradingStrategy.
func (s *{{ strategyName }}Strategy) ProcessData(ctx context.Context, req *strategy.ProcessDataRequest) (*emptypb.Empty, error) {
	return &emptypb.Empty{}, nil
}